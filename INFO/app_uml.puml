@startuml
interface com.example.Spring_Boot_Rest_Contacts.sevice.contact.ContactService {
~ Contact create(ContactDtoRequest)
~ Optional<List<Contact>> getAll()
~ Contact getById(Long)
~ Contact updateById(Long,ContactDtoRequest)
~ boolean deleteById(Long)
}

class com.example.Spring_Boot_Rest_Contacts.dto.contact.ContactDtoRequest {
- Long id
- String firstName
- String lastName
- String phone
+ String lastName()
+ String firstName()
+ String phone()
+ Long id()
}


interface com.example.Spring_Boot_Rest_Contacts.sevice.BaseService {
~ T create(S)
~ Optional<List<T>> getAll()
~ T getById(Long)
~ T updateById(Long,S)
~ boolean deleteById(Long)
}

class com.example.Spring_Boot_Rest_Contacts.dto.contact.ContactDtoListResponse {
- int statusCode
- String reasonPhrase
- boolean success
- String message
- List<Contact> contactList
+ {static} String SUCCESS_MESSAGE
+ {static} String FAILURE_MESSAGE
+ {static} ContactDtoListResponse of(boolean,List<Contact>)
+ boolean success()
+ String message()
+ List<Contact> contactList()
+ String reasonPhrase()
+ int statusCode()
}


class com.example.Spring_Boot_Rest_Contacts.controller.ContactController {
- ContactServiceImpl service
+ ResponseEntity<ContactDtoCreateResponse> createContact(ContactDtoRequest)
+ ResponseEntity<ContactDtoListResponse> getAllContacts()
+ ResponseEntity<ContactDtoGetByIdResponse> getContactById(Long)
+ ResponseEntity<ContactDtoUpdateResponse> updateContactById(Long,ContactDtoRequest)
+ ResponseEntity<ContactDtoDeleteResponse> deleteContactById(Long)
}


interface com.example.Spring_Boot_Rest_Contacts.repository.ContactRepository {
}
class com.example.Spring_Boot_Rest_Contacts.AppDemoApplication {
+ {static} void main(String[])
}

class com.example.Spring_Boot_Rest_Contacts.entity.contact.ContactMapper {
+ Contact dtoCreateToEntity(ContactDtoRequest)
+ Contact dtoUpdateToEntity(Long,ContactDtoRequest,Contact)
}

class com.example.Spring_Boot_Rest_Contacts.sevice.contact.ContactServiceImpl {
- ContactMapper mapper
- ContactRepository repository
+ Contact create(ContactDtoRequest)
+ Optional<List<Contact>> getAll()
+ Contact getById(Long)
+ Contact updateById(Long,ContactDtoRequest)
+ boolean deleteById(Long)
}


class com.example.Spring_Boot_Rest_Contacts.config.ServletInitializer {
# SpringApplicationBuilder configure(SpringApplicationBuilder)
}

class com.example.Spring_Boot_Rest_Contacts.dto.contact.ContactDtoDeleteResponse {
- int statusCode
- String reasonPhrase
- boolean success
- String message
+ {static} String SUCCESS_MESSAGE
+ {static} String FAILURE_MESSAGE
+ {static} ContactDtoDeleteResponse of(Long,boolean)
+ boolean success()
+ String message()
+ String reasonPhrase()
+ int statusCode()
}


class com.example.Spring_Boot_Rest_Contacts.dto.contact.ContactDtoCreateResponse {
- int statusCode
- String reasonPhrase
- boolean success
- String message
- Contact contact
+ {static} String SUCCESS_MESSAGE
+ {static} String FAILURE_MESSAGE
+ {static} ContactDtoCreateResponse of(boolean,Contact)
+ boolean success()
+ String message()
+ Contact contact()
+ String reasonPhrase()
+ int statusCode()
}


class com.example.Spring_Boot_Rest_Contacts.dto.contact.ContactDtoGetByIdResponse {
- int statusCode
- String reasonPhrase
- boolean success
- String message
- Contact contact
+ {static} String SUCCESS_MESSAGE
+ {static} String FAILURE_MESSAGE
+ {static} ContactDtoGetByIdResponse of(Long,boolean,Contact)
+ boolean success()
+ String message()
+ Contact contact()
+ String reasonPhrase()
+ int statusCode()
}


class com.example.Spring_Boot_Rest_Contacts.entity.contact.Contact {
- Long id
- String firstName
- String lastName
- String phone
+ Long getId()
+ void setId(Long)
+ String getFirstName()
+ void setFirstName(String)
+ String getLastName()
+ void setLastName(String)
+ String getPhone()
+ void setEmail(String)
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}


class com.example.Spring_Boot_Rest_Contacts.dto.contact.ContactDtoUpdateResponse {
- int statusCode
- String reasonPhrase
- boolean success
- String message
- Contact contact
+ {static} String SUCCESS_MESSAGE
+ {static} String FAILURE_MESSAGE
+ {static} ContactDtoUpdateResponse of(Long,boolean,Contact)
+ boolean success()
+ String message()
+ Contact contact()
+ String reasonPhrase()
+ int statusCode()
}




com.example.Spring_Boot_Rest_Contacts.sevice.BaseService <|-- com.example.Spring_Boot_Rest_Contacts.sevice.contact.ContactService
org.springframework.data.repository.CrudRepository <|-- com.example.Spring_Boot_Rest_Contacts.repository.ContactRepository
com.example.Spring_Boot_Rest_Contacts.sevice.contact.ContactService <|.. com.example.Spring_Boot_Rest_Contacts.sevice.contact.ContactServiceImpl
org.springframework.boot.web.servlet.support.SpringBootServletInitializer <|-- com.example.Spring_Boot_Rest_Contacts.config.ServletInitializer
@enduml